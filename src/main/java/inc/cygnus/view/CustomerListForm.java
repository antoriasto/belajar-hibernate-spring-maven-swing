/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inc.cygnus.view;

import inc.cygnus.app.MainSpring;
import inc.cygnus.model.Customer;
import inc.cygnus.report.CustomerReport;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.table.AbstractTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;


/**
 *
 * @author TA planning
 */
public class CustomerListForm extends javax.swing.JInternalFrame {

    private List<Customer> listCustomer;
    private final CustomerTableModel customerTableModel = new CustomerTableModel(null);

    /**
     * Creates new form CustomerListForm
     */
    public CustomerListForm() {
        initComponents();
        findAllData();
    }

    private void findAllData() {
        listCustomer = MainSpring.getCustomerService().findAllData("", "", 0, 20);
        if (!listCustomer.isEmpty()) {
            customerTableModel.setTableModel(listCustomer);
            tblCustomer.setModel(customerTableModel);
        }
    }

    /**
     * Abstract Tabel Model Customer
     */
    private class CustomerTableModel extends AbstractTableModel {

        private List<Customer> listCustomer;

        public CustomerTableModel(List<Customer> listCustomer) {
            this.listCustomer = listCustomer;
        }

        public void setTableModel(List<Customer> listCustomer) {
            this.listCustomer = listCustomer;
        }

        @Override
        public int getRowCount() {
            return listCustomer.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "ID";
                case 1:
                    return "Name";
                case 3:
                    return "Addres";
                case 2:
                    return "Contact";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Customer s = listCustomer.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return s.getId();
                case 1:
                    return s.getName();
                case 3:
                    return s.getDateCreated();
                case 2:
                    return s.getDateModified();
                default:
                    return "";
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            return listCustomer.get(columnIndex).getClass();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            if (columnIndex == 3) {
                return true;
            }
            return false;
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            Customer s = listCustomer.get(rowIndex);
            if (columnIndex == 3) {
                //	            s.setQuantity((Integer) aValue);
                //	            s.setSubtotal(s.getPrice().multiply(
                //	                    new BigDecimal(s.getQuantity())));
                //	            refreshTotalLabel();
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        btnAddNew = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnPrint = new javax.swing.JButton();

        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tblCustomer);

        jToolBar1.setRollover(true);

        btnAddNew.setText("Add New");
        btnAddNew.setFocusable(false);
        btnAddNew.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddNew.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAddNew);

        btnEdit.setText("Edit");
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar1.add(btnEdit);
        jToolBar1.add(jSeparator1);

        btnPrint.setText("Print All");
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrint.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPrint);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2)
                .addGap(5, 5, 5))
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewActionPerformed
        CustomerEntryForm c = new CustomerEntryForm(null, true, new Customer(19L));
        c.setVisible(true);
    }//GEN-LAST:event_btnAddNewActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed

        List<Customer> listCustomer = MainSpring.getCustomerService().findAllData("", "", 0, 10);

        List<CustomerReport> dataSourceReport = new ArrayList<CustomerReport>();

        for (Customer c : listCustomer) {
            System.out.println(c.getName());
            CustomerReport cr = new CustomerReport();
            cr.setId(c.getId());
            cr.setName(c.getName());
            //cr.setFoto(c.getFoto());
            
            if (c.getFoto() != null) {
                
                System.out.println("image size "+c.getFoto().length+" bytes");
                ByteArrayInputStream byteArrayInputStream = null;
                try {
                    ObjectInputStream objectInputStream = new ObjectInputStream(new ByteArrayInputStream(c.getFoto()));
                    //ImageIO.read(byteArrayInputStream);

                    byteArrayInputStream = new ByteArrayInputStream(c.getFoto());
                    Image photo; //= ImageIO.read(byteArrayInputStream);
                    
                    // Percobaan
                    //photo = ImageIO.read(objectInputStream);
                    //photo = ImageIO.read(byteArrayInputStream);
                    photo = new ImageIcon(c.getFoto()).getImage();
                    
                    //photo = Toolkit.getDefaultToolkit().createImage(c.getFoto());
                    int maxPictureSize = 128;
                    
                    System.out.println("Photo : "+photo);
                    
                    if (photo.getHeight(this) > maxPictureSize || photo.getWidth(this) > maxPictureSize) {
                        if (photo.getHeight(this) > photo.getWidth(this)) {
                            float scale = photo.getHeight(this) / maxPictureSize;
                            int widthSize = (int) (photo.getWidth(this) / scale);
                            photo = photo.getScaledInstance(maxPictureSize, widthSize, Image.SCALE_SMOOTH);
                        } else {
                            float scale = photo.getWidth(this) / maxPictureSize;
                            int heightSize = (int) (photo.getHeight(this) / scale);
                            photo = photo.getScaledInstance(maxPictureSize, heightSize, Image.SCALE_SMOOTH);
                        }
                    }
                    
                    //ObjectInputStream objectInputStream
                                //= new ObjectInputStream(new ByteArrayInputStream(c.getFoto()));
                        //image = (ImageIcon) objectInputStream.readObject();
                    //photo = objectInputStream;
                    
                    cr.setFoto(photo);
                    //cr.setFoto(null);
                } catch (Exception ex) {
                    Logger.getLogger(CustomerListForm.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        byteArrayInputStream.close();
                        
                    } catch (IOException ex) {
                        Logger.getLogger(CustomerListForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
              
            } else {
                cr.setFoto(null);
            }

            dataSourceReport.add(cr);
            /*if (c.getFoto() != null) {
                byte[] bytes = c.getFoto();
                Byte[] byteObjects = new Byte[bytes.length];

                int i = 0;
                // Associating Byte array values with bytes. (byte[] to Byte[])
                for (byte b : bytes) {
                    byteObjects[i++] = b;  // Autoboxing.
                }
                
                if (byteObjects != null) {
                    cr.setFoto(byteObjects);
                }
                
            } else {
                cr.setFoto(null);
            }
            dataSourceReport.add(cr); */
        }

        if (!dataSourceReport.isEmpty()) {

            //menentukan file jrmxl yang akan di compile
            JasperReport jasperReport = null;
            try {
                jasperReport = JasperCompileManager.
                        compileReport("./src/main/java/report/ReportCustomer.jrxml");
            } catch (JRException e1) {
                e1.printStackTrace();
            }
            //compile file .jrmxl ke .jasper
            try {
                JasperCompileManager.compileReportToFile("./src/main/java/report/ReportCustomer.jrxml",
                        "./src/main/java/report/ReportCustomer.jasper");
            } catch (JRException e1) {
                e1.printStackTrace();
            }

            //mengisi dan menampilkan report
            JasperPrint jasperPrint = null;
            try {
                jasperPrint = JasperFillManager.fillReport(jasperReport,
                        new HashMap(), new JRBeanCollectionDataSource(dataSourceReport));
            } catch (JRException ex) {
                Logger.getLogger(CustomerListForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            JasperViewer.viewReport(jasperPrint, false);
        }

    }//GEN-LAST:event_btnPrintActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNew;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnPrint;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTable tblCustomer;
    // End of variables declaration//GEN-END:variables
}
